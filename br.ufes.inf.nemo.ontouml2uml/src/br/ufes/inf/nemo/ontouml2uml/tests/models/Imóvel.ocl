import 'Imóvel.uml'

 package _'Imóvel'

--=====================================
--World Structure
--======================================

context World
inv no_cycle: self->asSet()->closure(next)->excludes(self)

context Path
inv no_parallel_structure: Path.allInstances()->forAll(p | self.world->intersection(p.world)->notEmpty())

context Path
inv one_terminal_world: self.world->one(w | w.next->isEmpty())

inv one_initial_world: self.world->one(w | w.previous.oclIsUndefined())

inv no_two_paths_with_same_end: Path.allInstances()->forAll(p | p<>self implies
p.world->select(w |w.next->isEmpty()) <> 
self.world->select(w |w.next->isEmpty()))

inv worlds_of_a_path_derived: 
let t: Set(World) = self.world->select(w| w.next->isEmpty())
in (self.world-t) = t->closure(previous)

inv every_end_in_one_path: 
let ts: Set(World) = World.allInstances()->select(w |w.next->isEmpty())
in ts->forAll(t | Path.allInstances()->one(p | p.world->includes(t)))

--=====================================
--Temporal Operations
--======================================

context World::next():Set(World) body: self.next

context World::previous():World body: self.previous

context World::paths():Set(Path) body: self.path

context Path::worlds():Set(World) body: self.world

context World::allIndividuals():Set(Individual) body: self.individual

context World::hasNext():Boolean body: not self.next->isEmpty()

context World::hasPrevious():Boolean body: not self.previous.oclIsUndefined()

context Individual::existsIn(w: World):Boolean body: w.individual->includes(self)

context World::allNext():Set(World) body: self->asSet()->closure(next)->asSet()

context World::allNext(w: World):Set(World)
body: if self.allNext()->includes(w) then w.allPrevious() - self.allPrevious() -
self->asSet() else Set{} endif

context World::allNext(p: Path):Set(World)
body: self->asSet()->closure(next)->asSet()->select(w | w.paths()->includes(p))

context World::allPrevious():Set(World) 
body: self->asSet()->closure(previous)->asSet()

context World::allPrevious(w: World):Set(World) 
body: if self.allPrevious()->includes(w) then self.allPrevious() - w.allPrevious() - w->asSet()
else Set{} endif

context Individual::oclIsCreated(w: World) : Boolean
body: if(not w.previous.oclIsUndefined() and not self.existsIn(w.previous) and
self.existsIn(w)) then true else false endif

context Individual::oclIsDeleted(w: World) : Boolean
body:  if(not w.previous.oclIsUndefined() and self.existsIn(w.previous) and not
self.existsIn(w)) then true else false endif

--=====================================
--Multiplicity
--======================================

context World

inv descreve_from_imóvel edificado_to_planta do imóvel: 
	   self.individual->select(i | i.oclIsKindOf(_'Imóvel Edificado'))->forAll(m | 
      let targets : Set(_'Planta do Imóvel') = m._'descreve'->select(r | r.world = self)
      in targets->size() >= 1)

inv descreve_from_planta do imóvel_to_imóvel edificado: 
	   self.individual->select(i | i.oclIsKindOf(_'Planta do Imóvel'))->forAll(m | 
      let sources : Set(_'Imóvel Edificado') = m._'descreve'->select(r | r.world = self)
      in sources->size() >= 1)

inv possui_from_certidão de registro de imóvel_to_imóvel: 
	   self.individual->select(i | i.oclIsKindOf(_'Certidão de Registro de Imóvel'))->forAll(m | 
      let targets : Set(_'Imóvel') = m._'possui'->select(r | r.world = self)
      in targets->size() >= 1 and targets->size() <= 1)

inv possui_from_imóvel_to_certidão de registro de imóvel: 
	   self.individual->select(i | i.oclIsKindOf(_'Imóvel'))->forAll(m | 
      let sources : Set(_'Certidão de Registro de Imóvel') = m._'possui'->select(r | r.world = self)
      in sources->size() >= 1 and sources->size() <= 1)

inv faz_from_certidão de registro de imóvel_to_cartório: 
	   self.individual->select(i | i.oclIsKindOf(_'Certidão de Registro de Imóvel'))->forAll(m | 
      let targets : Set(_'Cartório') = m._'faz'->select(r | r.world = self)
      in targets->size() >= 1 and targets->size() <= 1)

inv faz_from_cartório_to_certidão de registro de imóvel: 
	   self.individual->select(i | i.oclIsKindOf(_'Cartório'))->forAll(m | 
      let sources : Set(_'Certidão de Registro de Imóvel') = m._'faz'->select(r | r.world = self)
      in sources->size() >= 1 and sources->size() <= -1)

inv / registrado em_from_imóvel_to_cartório: 
	   self.individual->select(i | i.oclIsKindOf(_'Imóvel'))->forAll(m | 
      let targets : Set(_'Cartório') = m._'/ registrado em'->select(r | r.world = self)
      in targets->size() >= 1 and targets->size() <= 1)

inv / registrado em_from_cartório_to_imóvel: 
	   self.individual->select(i | i.oclIsKindOf(_'Cartório'))->forAll(m | 
      let sources : Set(_'Imóvel') = m._'/ registrado em'->select(r | r.world = self)
      in sources->size() >= 1 and sources->size() <= -1)

inv / está dentro de_from_área_to_imóvel: 
	   self.individual->select(i | i.oclIsKindOf(_'Área'))->forAll(m | 
      let targets : Set(_'Imóvel') = m._'/ está dentro de'->select(r | r.world = self)
      in targets->size() >= 0)

inv / está dentro de_from_imóvel_to_área: 
	   self.individual->select(i | i.oclIsKindOf(_'Imóvel'))->forAll(m | 
      let sources : Set(_'Área') = m._'/ está dentro de'->select(r | r.world = self)
      in sources->size() >= 0)

inv contém_from_município_to_estado: 
	   self.individual->select(i | i.oclIsKindOf(_'Município'))->forAll(m | 
      let targets : Set(_'Estado') = m._'contém'->select(r | r.world = self)
      in targets->size() >= 1 and targets->size() <= 1)

inv contém_from_estado_to_município: 
	   self.individual->select(i | i.oclIsKindOf(_'Estado'))->forAll(m | 
      let sources : Set(_'Município') = m._'contém'->select(r | r.world = self)
      in sources->size() >= 1 and sources->size() <= -1)

inv contém_from_estado_to_país: 
	   self.individual->select(i | i.oclIsKindOf(_'Estado'))->forAll(m | 
      let targets : Set(_'País') = m._'contém'->select(r | r.world = self)
      in targets->size() >= 1 and targets->size() <= 1)

inv contém_from_país_to_estado: 
	   self.individual->select(i | i.oclIsKindOf(_'País'))->forAll(m | 
      let sources : Set(_'Estado') = m._'contém'->select(r | r.world = self)
      in sources->size() >= 1 and sources->size() <= -1)

inv contém_from_município_to_distrito: 
	   self.individual->select(i | i.oclIsKindOf(_'Município'))->forAll(m | 
      let targets : Set(_'Distrito') = m._'contém'->select(r | r.world = self)
      in targets->size() >= 0)

inv contém_from_distrito_to_município: 
	   self.individual->select(i | i.oclIsKindOf(_'Distrito'))->forAll(m | 
      let sources : Set(_'Município') = m._'contém'->select(r | r.world = self)
      in sources->size() >= 1)

inv relationship8_from_elemento linear_to_ponto linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Linear'))->forAll(m | 
      let targets : Set(_'Ponto Linear') = m._'relationship8'->select(r | r.world = self)
      in targets->size() >= 2)

inv relationship8_from_ponto linear_to_elemento linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Ponto Linear'))->forAll(m | 
      let sources : Set(_'Elemento Linear') = m._'relationship8'->select(r | r.world = self)
      in sources->size() >= 1)

inv conectado a_from_ponto linear_to_ponto linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Ponto Linear'))->forAll(m | 
      let targets : Set(_'Ponto Linear') = m._'conectado a'->select(r | r.world = self)
      in targets->size() >= 1)

inv conectado a_from_ponto linear_to_ponto linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Ponto Linear'))->forAll(m | 
      let sources : Set(_'Ponto Linear') = m._'conectado a'->select(r | r.world = self)
      in sources->size() >= 1)

inv relationship10_from_elemento espacial_to_ponto espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Espacial'))->forAll(m | 
      let targets : Set(_'Ponto Espacial') = m._'relationship10'->select(r | r.world = self)
      in targets->size() >= 3)

inv relationship10_from_ponto espacial_to_elemento espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Ponto Espacial'))->forAll(m | 
      let sources : Set(_'Elemento Espacial') = m._'relationship10'->select(r | r.world = self)
      in sources->size() >= 1)

inv conectado a_from_ponto espacial_to_ponto espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Ponto Espacial'))->forAll(m | 
      let targets : Set(_'Ponto Espacial') = m._'conectado a'->select(r | r.world = self)
      in targets->size() >= 1)

inv conectado a_from_ponto espacial_to_ponto espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Ponto Espacial'))->forAll(m | 
      let sources : Set(_'Ponto Espacial') = m._'conectado a'->select(r | r.world = self)
      in sources->size() >= 1)

inv possui interseção com_from_elemento espacial_to_elemento espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Espacial'))->forAll(m | 
      let targets : Set(_'Elemento Espacial') = m._'possui interseção com'->select(r | r.world = self)
      in targets->size() >= 0)

inv possui interseção com_from_elemento espacial_to_elemento espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Espacial'))->forAll(m | 
      let sources : Set(_'Elemento Espacial') = m._'possui interseção com'->select(r | r.world = self)
      in sources->size() >= 0)

inv contém_from_elemento espacial_to_elemento espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Espacial'))->forAll(m | 
      let targets : Set(_'Elemento Espacial') = m._'contém'->select(r | r.world = self)
      in targets->size() >= 0)

inv contém_from_elemento espacial_to_elemento espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Espacial'))->forAll(m | 
      let sources : Set(_'Elemento Espacial') = m._'contém'->select(r | r.world = self)
      in sources->size() >= 0)

inv cruza_from_elemento linear_to_elemento linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Linear'))->forAll(m | 
      let targets : Set(_'Elemento Linear') = m._'cruza'->select(r | r.world = self)
      in targets->size() >= 0)

inv cruza_from_elemento linear_to_elemento linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Linear'))->forAll(m | 
      let sources : Set(_'Elemento Linear') = m._'cruza'->select(r | r.world = self)
      in sources->size() >= 0)

inv passa por_from_elemento espacial_to_elemento linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Espacial'))->forAll(m | 
      let targets : Set(_'Elemento Linear') = m._'passa por'->select(r | r.world = self)
      in targets->size() >= 0)

inv passa por_from_elemento linear_to_elemento espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Linear'))->forAll(m | 
      let sources : Set(_'Elemento Espacial') = m._'passa por'->select(r | r.world = self)
      in sources->size() >= 0)

inv contém_from_elemento linear_to_elemento pontual: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Linear'))->forAll(m | 
      let targets : Set(_'Elemento Pontual') = m._'contém'->select(r | r.world = self)
      in targets->size() >= 0)

inv contém_from_elemento pontual_to_elemento linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Pontual'))->forAll(m | 
      let sources : Set(_'Elemento Linear') = m._'contém'->select(r | r.world = self)
      in sources->size() >= 0)

inv contém_from_elemento espacial_to_elemento pontual: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Espacial'))->forAll(m | 
      let targets : Set(_'Elemento Pontual') = m._'contém'->select(r | r.world = self)
      in targets->size() >= 0)

inv contém_from_elemento pontual_to_elemento espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Pontual'))->forAll(m | 
      let sources : Set(_'Elemento Espacial') = m._'contém'->select(r | r.world = self)
      in sources->size() >= 0)

inv subconjunto de_from_elemento linear_to_elemento linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Linear'))->forAll(m | 
      let targets : Set(_'Elemento Linear') = m._'subconjunto de'->select(r | r.world = self)
      in targets->size() >= 0)

inv subconjunto de_from_elemento linear_to_elemento linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Linear'))->forAll(m | 
      let sources : Set(_'Elemento Linear') = m._'subconjunto de'->select(r | r.world = self)
      in sources->size() >= 0)

inv relationship19_from_coordenada geográfica_to_elemento pontual: 
	   self.individual->select(i | i.oclIsKindOf(_'Coordenada Geográfica'))->forAll(m | 
      let targets : Set(_'Elemento Pontual') = m._'relationship19'->select(r | r.world = self)
      in targets->size() >= 0)

inv relationship19_from_elemento pontual_to_coordenada geográfica: 
	   self.individual->select(i | i.oclIsKindOf(_'Elemento Pontual'))->forAll(m | 
      let sources : Set(_'Coordenada Geográfica') = m._'relationship19'->select(r | r.world = self)
      in sources->size() >= 1)

inv relationship20_from_coordenada geográfica_to_ponto linear: 
	   self.individual->select(i | i.oclIsKindOf(_'Coordenada Geográfica'))->forAll(m | 
      let targets : Set(_'Ponto Linear') = m._'relationship20'->select(r | r.world = self)
      in targets->size() >= 0)

inv relationship20_from_ponto linear_to_coordenada geográfica: 
	   self.individual->select(i | i.oclIsKindOf(_'Ponto Linear'))->forAll(m | 
      let sources : Set(_'Coordenada Geográfica') = m._'relationship20'->select(r | r.world = self)
      in sources->size() >= 1)

inv relationship21_from_ponto espacial_to_coordenada geográfica: 
	   self.individual->select(i | i.oclIsKindOf(_'Ponto Espacial'))->forAll(m | 
      let targets : Set(_'Coordenada Geográfica') = m._'relationship21'->select(r | r.world = self)
      in targets->size() >= 1 and targets->size() <= 1)

inv relationship21_from_coordenada geográfica_to_ponto espacial: 
	   self.individual->select(i | i.oclIsKindOf(_'Coordenada Geográfica'))->forAll(m | 
      let sources : Set(_'Ponto Espacial') = m._'relationship21'->select(r | r.world = self)
      in sources->size() >= 0 and sources->size() <= -1)

endpackage

import 'RoadTrafficAccident.uml'

 package _'EA_Model'

--=====================================
--World Structure
--======================================

context World
inv no_cycle: self->asSet()->closure(next)->excludes(self)

context Path
inv no_parallel_structure: Path.allInstances()->forAll(p | self.world->intersection(p.world)->notEmpty())

context Path
inv one_terminal_world: self.world->one(w | w.next->isEmpty())

inv one_initial_world: self.world->one(w | w.previous.oclIsUndefined())

inv no_two_paths_with_same_end: Path.allInstances()->forAll(p | p<>self implies
p.world->select(w |w.next->isEmpty()) <> 
self.world->select(w |w.next->isEmpty()))

inv worlds_of_a_path_derived: 
let t: Set(World) = self.world->select(w| w.next->isEmpty())
in (self.world-t) = t->closure(previous)

inv every_end_in_one_path: 
let ts: Set(World) = World.allInstances()->select(w |w.next->isEmpty())
in ts->forAll(t | Path.allInstances()->one(p | p.world->includes(t)))

--=====================================
--Temporal Operations
--======================================

context World::next():Set(World) body: self.next

context World::previous():World body: self.previous

context World::paths():Set(Path) body: self.path

context Path::worlds():Set(World) body: self.world

context World::allIndividuals():Set(Individual) body: self.individual

context World::hasNext():Boolean body: not self.next->isEmpty()

context World::hasPrevious():Boolean body: not self.previous.oclIsUndefined()

context Individual::existsIn(w: World):Boolean body: w.individual->includes(self)

context World::allNext():Set(World) body: self->asSet()->closure(next)->asSet()

context World::allNext(w: World):Set(World)
body: if self.allNext()->includes(w) then w.allPrevious() - self.allPrevious() -
self->asSet() else Set{} endif

context World::allNext(p: Path):Set(World)
body: self->asSet()->closure(next)->asSet()->select(w | w.paths()->includes(p))

context World::allPrevious():Set(World) 
body: self->asSet()->closure(previous)->asSet()

context World::allPrevious(w: World):Set(World) 
body: if self.allPrevious()->includes(w) then self.allPrevious() - w.allPrevious() - w->asSet()
else Set{} endif

context Individual::oclIsCreated(w: World) : Boolean
body: if(not w.previous.oclIsUndefined() and not self.existsIn(w.previous) and
self.existsIn(w)) then true else false endif

context Individual::oclIsDeleted(w: World) : Boolean
body:  if(not w.previous.oclIsUndefined() and self.existsIn(w.previous) and not
self.existsIn(w)) then true else false endif

--=====================================
--Multiplicity
--======================================

context World

inv involves_from_roadtrafficaccident_to_crashedvehicle: 
	   self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m | 
      let targets : Set(_'CrashedVehicle') = m._'involves'->select(r | r.world = self)
      in targets->size() >= 1)

inv involves_from_crashedvehicle_to_roadtrafficaccident: 
	   self.individual->select(i | i.oclIsKindOf(_'CrashedVehicle'))->forAll(m | 
      let sources : Set(_'RoadTrafficAccident') = m._'involves'->select(r | r.world = self)
      in sources->size() >= 1)

inv has_from_roadtrafficaccident_to_victim: 
	   self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m | 
      let targets : Set(_'Victim') = m._'has'->select(r | r.world = self)
      in targets->size() >= 1)

inv has_from_victim_to_roadtrafficaccident: 
	   self.individual->select(i | i.oclIsKindOf(_'Victim'))->forAll(m | 
      let sources : Set(_'RoadTrafficAccident') = m._'has'->select(r | r.world = self)
      in sources->size() >= 1)

inv occurs on_from_roadtrafficaccident_to_roadwaywithaccident: 
	   self.individual->select(i | i.oclIsKindOf(_'RoadTrafficAccident'))->forAll(m | 
      let targets : Set(_'RoadwayWithAccident') = m._'occurs on'->select(r | r.world = self)
      in targets->size() >= 1 and targets->size() <= 1)

inv occurs on_from_roadwaywithaccident_to_roadtrafficaccident: 
	   self.individual->select(i | i.oclIsKindOf(_'RoadwayWithAccident'))->forAll(m | 
      let sources : Set(_'RoadTrafficAccident') = m._'occurs on'->select(r | r.world = self)
      in sources->size() >= 1 and sources->size() <= -1)

inv has_from_travel_to_traveler: 
	   self.individual->select(i | i.oclIsKindOf(_'Travel'))->forAll(m | 
      let targets : Set(_'Traveler') = m._'has'->select(r | r.world = self)
      in targets->size() >= 1)

inv has_from_traveler_to_travel: 
	   self.individual->select(i | i.oclIsKindOf(_'Traveler'))->forAll(m | 
      let sources : Set(_'Travel') = m._'has'->select(r | r.world = self)
      in sources->size() >= 1)

inv made by_from_travel_to_travelingvehicle: 
	   self.individual->select(i | i.oclIsKindOf(_'Travel'))->forAll(m | 
      let targets : Set(_'TravelingVehicle') = m._'made by'->select(r | r.world = self)
      in targets->size() >= 1 and targets->size() <= 1)

inv made by_from_travelingvehicle_to_travel: 
	   self.individual->select(i | i.oclIsKindOf(_'TravelingVehicle'))->forAll(m | 
      let sources : Set(_'Travel') = m._'made by'->select(r | r.world = self)
      in sources->size() >= 1 and sources->size() <= 1)

inv crashes on_from_roadwaywithaccident_to_crashedvehicle: 
	   self.individual->select(i | i.oclIsKindOf(_'RoadwayWithAccident'))->forAll(m | 
      let targets : Set(_'CrashedVehicle') = m._'crashes on'->select(r | r.world = self)
      in targets->size() >= 1)

inv crashes on_from_crashedvehicle_to_roadwaywithaccident: 
	   self.individual->select(i | i.oclIsKindOf(_'CrashedVehicle'))->forAll(m | 
      let sources : Set(_'RoadwayWithAccident') = m._'crashes on'->select(r | r.world = self)
      in sources->size() >= 1)

endpackage

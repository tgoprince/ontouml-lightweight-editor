/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import obj.Atom;
import obj.Field;
import obj.ReadXML;
import obj.Sig;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.ParserConfigurationException;
import org.graphstream.graph.Graph;
import org.graphstream.graph.implementations.*;
import org.graphstream.ui.swingViewer.View;
import org.graphstream.ui.swingViewer.Viewer;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.graphstream.ui.graphicGraph.*;
import org.graphstream.ui.swingViewer.ViewerListener;
import org.graphstream.ui.swingViewer.ViewerPipe;

/**
 *
 * @author Mauricio
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow(org.graphstream.graph.Graph graph) {
        super();

        //viewer = new Viewer(graph, Viewer.ThreadingModel.GRAPH_IN_SWING_THREAD);
        log = "";
        /*
        viewer = graph.display();
        viewer.enableAutoLayout();
        viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.CLOSE_VIEWER);
*/
        //View view = viewer.addDefaultView(false);

        //view.setVisible(true);
        
        //setBounds(0, 0, 640, 480);

        initComponents();
        //scrollPane1.add(view);
        layoutCheckBox.setSelected(true);
        worldComboBox.addItem("Show all worlds");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        layoutCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        worldComboBox = new javax.swing.JComboBox();
        zoomPlusButton = new javax.swing.JButton();
        zoomMinusButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        previousWorldButton = new javax.swing.JButton();
        nextWorldButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        loadButton.setText("Load XML");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        layoutCheckBox.setText("Auto Layout");
        layoutCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layoutCheckBoxActionPerformed(evt);
            }
        });

        logArea.setColumns(20);
        logArea.setRows(5);
        jScrollPane1.setViewportView(logArea);

        worldComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        worldComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                worldComboBoxActionPerformed(evt);
            }
        });

        zoomPlusButton.setText("Zoom +");
        zoomPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomPlusButtonActionPerformed(evt);
            }
        });

        zoomMinusButton.setText("Zoom -");
        zoomMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomMinusButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Attribute");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("To Viewer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        previousWorldButton.setText("<<");
        previousWorldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousWorldButtonActionPerformed(evt);
            }
        });

        nextWorldButton.setText(">>");
        nextWorldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextWorldButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(layoutCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(zoomPlusButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(previousWorldButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zoomMinusButton)
                            .addComponent(worldComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(nextWorldButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(jButton2)
                    .addComponent(worldComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(previousWorldButton)
                    .addComponent(nextWorldButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(layoutCheckBox)
                    .addComponent(zoomPlusButton)
                    .addComponent(zoomMinusButton)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("./"));
        fc.setFileFilter(new FileNameExtensionFilter("XML instances", "xml"));
        int returnVal = fc.showOpenDialog(MainWindow.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
                xmlFile = fc.getSelectedFile();
                //This is where a real application would open the file.
                log = log.concat("opened " + xmlFile.getAbsolutePath() + "\n");
                logArea.setText(log);
            
            } else {
                
            }
        try {                
            parseXML(xmlFile.getAbsolutePath());
            graph = showAllWorlds();
            viewer = graph.display();
            viewer.enableAutoLayout();
            viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.CLOSE_VIEWER);
            view = viewer.getDefaultView();
            
            layoutCheckBox.setSelected(true);
        } catch (    ParserConfigurationException | SAXException | IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_loadButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void layoutCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layoutCheckBoxActionPerformed
        // TODO add your handling code here:
        if(layoutCheckBox.isSelected()) {
            viewer.enableAutoLayout();
        }else{
            viewer.disableAutoLayout();
        }
    }//GEN-LAST:event_layoutCheckBoxActionPerformed

    private void zoomPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomPlusButtonActionPerformed
        // TODO add your handling code here:
        view.getCamera().setViewPercent(view.getCamera().getViewPercent() - 0.1);
    }//GEN-LAST:event_zoomPlusButtonActionPerformed

    private void zoomMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomMinusButtonActionPerformed
        // TODO add your handling code here:
        view.getCamera().setViewPercent(view.getCamera().getViewPercent() + 0.1);
    }//GEN-LAST:event_zoomMinusButtonActionPerformed

    private void worldComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_worldComboBoxActionPerformed
        // TODO add your handling code here:
        if(worldComboBox.getSelectedIndex() == 0) {
            try {
                
            } catch(Exception e) {
                
            }
        }else{
            viewer.close();
            
            graph = showSelectedWorld();
            viewer = graph.display();
            viewer.enableAutoLayout();
            viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.CLOSE_VIEWER);
            view = viewer.getDefaultView();
        }
    }//GEN-LAST:event_worldComboBoxActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        
        graph.addAttribute("ui.stylesheet", "node {\n"
                + jTextField1.getText() + ";\n"
                + "}\n");
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        view.requestFocus();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void previousWorldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousWorldButtonActionPerformed
        // TODO add your handling code here:
        System.out.println(worldComboBox.getSelectedIndex());
        if(worldComboBox.getSelectedIndex() == 0) {
            addLog("Reached world list limit");
        } else {
            worldComboBox.setSelectedIndex(worldComboBox.getSelectedIndex() - 1);
        }
    }//GEN-LAST:event_previousWorldButtonActionPerformed

    private void nextWorldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextWorldButtonActionPerformed
        // TODO add your handling code here:
        if(worldComboBox.getSelectedIndex() + 1 == worldComboBox.getItemCount()) {
            addLog("Reached world list limit");
        } else {
            worldComboBox.setSelectedIndex(worldComboBox.getSelectedIndex() + 1);
        }
    }//GEN-LAST:event_nextWorldButtonActionPerformed

    public org.graphstream.graph.Graph showAllWorlds() {
        int i, j, k;
        org.graphstream.graph.Node node;
        Graph graph = new MultiGraph("I can see dead pixels");
        ArrayList<ArrayList<String>> aux2;
        ArrayList<String> aux3;
        
        for(i=0; i<atomList.size(); i++) {
                if('w' == atomList.get(i).getLabel().charAt(0)) {
                    System.out.println("qwoficnwe9in");
                    graph.addNode(atomList.get(i).getLabel());
                    graph.getNode(atomList.get(i).getLabel()).addAttribute("ui.label", atomList.get(i).getLabel());
                    worldComboBox.addItem(atomList.get(i).getLabel());
                }
        }
        
        for(i=0; i<fieldList.size(); i++) {
            if(0 == fieldList.get(i).getLabel().compareTo("next")) {
                aux2 = fieldList.get(i).getTuples();
                for(j=0; j<aux2.size(); j++) {
                    aux3 = aux2.get(j);
                    for(k=0; k<aux3.size() - 1; k++) {
                        try {
                        System.out.println(aux3.get(k));
                        System.out.println(aux3.get(k+1));
                        graph.addEdge(aux3.get(k).concat(fieldList.get(i).getLabel().concat(aux3.get(k+1))), aux3.get(k), aux3.get(k+1), true);
                        graph.getEdge(aux3.get(k).concat(fieldList.get(i).getLabel().concat(aux3.get(k+1)))).addAttribute("ui.label", fieldList.get(i).getLabel());
                        } catch (Exception e) {

                        }
                    }
                }
            }
        }
        
        graph.addAttribute("ui.antialias");
        
        graph.addAttribute("ui.stylesheet", "graph {\n" +
"}\n" +
"node {\n" +
"    size: 50px, 50px;\n" +
"    shape: box;\n" +
"    fill-color: rgba(255,255,255,255);\n" +
"    text-size: 14;\n" +
"    stroke-mode: plain;\n" +
"    stroke-color: black;\n" +
"    size-mode: fit;\n" +
"}\n" +
"edge {\n" +
"    fill-color: #222;\n" +
"    arrow-size: 8px, 8px;\n" +
"}" +
"node#A {\n" +
"    fill-color: blue;\n" +
"}\n" +
"node:clicked {\n" +
"    fill-color: red;\n" +
"}");   
        
        
        return graph;
    }

    public org.graphstream.graph.Graph showSelectedWorld() {
        int i, j, k;
        org.graphstream.graph.Node node;
        obj.Field exists = null;
        Graph graph = new MultiGraph("I can see dead pixels");
        ArrayList<ArrayList<String>> aux2;
        ArrayList<String> aux3;
        /*
        for(i=0; i<atomList.size(); i++) {
                if('w' == atomList.get(i).getLabel().charAt(0)) {
                    System.out.println("qwoficnwe9in");
                    graph.addNode(atomList.get(i).getLabel());
                    graph.getNode(atomList.get(i).getLabel()).addAttribute("ui.label", atomList.get(i).getLabel());
                    worldComboBox.addItem(atomList.get(i).getLabel());
                }
        }
        */
        //graph.setAutoCreate(true);
        for(i=0; i<fieldList.size(); i++) {
            if(fieldList.get(i).getLabel().equals("exists")) {
                exists = fieldList.remove(i);
            }
        }
        
        for(i=0; i<exists.getTuples().size(); i++) {
            if(exists.getTuples().get(i).get(0).equals((String) worldComboBox.getSelectedItem())) {
                graph.addNode(exists.getTuples().get(i).get(1));
                graph.getNode(exists.getTuples().get(i).get(1)).addAttribute("ui.label", exists.getTuples().get(i).get(1));
            }
        }
        
         for(i=0; i<fieldList.size(); i++) {
            if(fieldList.get(i).getTuples().get(0).size() > 2) { 
                aux2 = fieldList.get(i).getTuples();
                for(j=0; j<aux2.size(); j++) {
                    aux3 = aux2.get(j);
                    if(aux3.get(0).equals((String) worldComboBox.getSelectedItem())) {
                        for(k=1; k<aux3.size() - 1; k++) {
                            try {
                            System.out.println(aux3.get(k));
                            System.out.println(aux3.get(k+1));
                            graph.addEdge(aux3.get(k).concat(fieldList.get(i).getLabel().concat(aux3.get(k+1))), aux3.get(k), aux3.get(k+1), true);
                            graph.getEdge(aux3.get(k).concat(fieldList.get(i).getLabel().concat(aux3.get(k+1)))).addAttribute("ui.label", fieldList.get(i).getLabel());
                            } catch (Exception e) {

                            }
                        }
                    }
                }
            }
        }
        /*
        for(i=0; i<fieldList.size(); i++) {
                aux2 = fieldList.get(i).getTuples();
                for(j=0; j<aux2.size(); j++) {
                    aux3 = aux2.get(j);
                    if(aux3.get(0).equals((String) worldComboBox.getSelectedItem())) {
                        for(k=0; k<aux3.size() - 1; k++) {
                            try {
                                System.out.println("oweifheroigherbhgerth");
                                System.out.println(aux3.get(k));
                                System.out.println(aux3.get(k+1));
                                graph.addNode(aux3.get(k));
                                graph.addNode(aux3.get(k+1));
                                graph.getNode(aux3.get(k)).addAttribute("ui.label", aux3.get(k));
                                graph.getNode(aux3.get(k+1)).addAttribute("ui.label", aux3.get(k));
                                graph.addEdge(aux3.get(k).concat(fieldList.get(i).getLabel().concat(aux3.get(k+1))), aux3.get(k), aux3.get(k+1), true);
                                graph.getEdge(aux3.get(k).concat(fieldList.get(i).getLabel().concat(aux3.get(k+1)))).addAttribute("ui.label", fieldList.get(i).getLabel());
                            } catch (Exception e) {

                            }
                        }
                    }
                }
        }
        */
        fieldList.add(exists);
        
        graph.addAttribute("ui.antialias");
        
        graph.addAttribute("ui.stylesheet", "graph {\n" +
"}\n" +
"node {\n" +
"    size: 50px, 50px;\n" +
"    shape: box;\n" +
"    fill-color: rgba(255,255,255,255);\n" +
"    text-size: 14;\n" +
"    stroke-mode: plain;\n" +
"    stroke-color: black;\n" +
"    size-mode: fit;\n" +
"}\n" +
"edge {\n" +
"    fill-color: #222;\n" +
"    arrow-size: 8px, 8px;\n" +
"}" +
"node#A {\n" +
"    fill-color: blue;\n" +
"}\n" +
"node:clicked {\n" +
"    fill-color: red;\n" +
"}");   
        
        
        return graph;
    }

    public org.graphstream.graph.Graph showAll() {
        int i, j, k;
        Graph graph = new MultiGraph("I can see dead pixels");
        ArrayList<ArrayList<String>> aux2;
        ArrayList<String> aux3;
        System.out.println(atomList.size());
        
        for(i=0; i<atomList.size(); i++) {
            System.out.println("FOI2");
            graph.addNode(atomList.get(i).getLabel());
            graph.getNode(i).addAttribute("ui.label", atomList.get(i).getLabel());

        }
        
        for(i=0; i<fieldList.size(); i++) {
            aux2 = fieldList.get(i).getTuples();
            for(j=0; j<aux2.size(); j++) {
                aux3 = aux2.get(j);
                for(k=0; k<aux3.size() - 1; k++) {
                    try {
                    System.out.println(aux3.get(k));
                    System.out.println(aux3.get(k+1));
                    graph.addEdge(aux3.get(k).concat(fieldList.get(i).getLabel().concat(aux3.get(k+1))), aux3.get(k), aux3.get(k+1));
                    graph.getEdge(aux3.get(k).concat(fieldList.get(i).getLabel().concat(aux3.get(k+1)))).addAttribute("ui.label", fieldList.get(i).getLabel());
                    } catch (Exception e) {
                        
                    }
                }
            }
        }
        
        graph.addAttribute("ui.antialias");
        
        graph.addAttribute("ui.stylesheet", "graph {\n" +
"}\n" +
"node {\n" +
"    size: 50px, 50px;\n" +
"    shape: box;\n" +
"    fill-color: green;\n" +
"    stroke-mode: plain;\n" +
"    stroke-color: yellow;\n" +
"    size-mode: fit;\n" +
"}\n" +
"node#A {\n" +
"    fill-color: blue;\n" +
"}\n" +
"node:clicked {\n" +
"    fill-color: red;\n" +
"}");   
        
        return graph;
    }

    public void parseXML(String filePath) throws ParserConfigurationException, SAXException, IOException {
        System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
        
        integers = new ArrayList();
        skolemList = new ArrayList();
        
        atomList = new ArrayList();
        sigList = new ArrayList();
        fieldList = new ArrayList();
        
        int i, j, k;
        
        ReadXML xml = new ReadXML(filePath);
        //System.out.println(xml.getPos().getNodeName());
        
        Sig sig;
        Field field;
        
        NodeList sigl = xml.getDoc().getElementsByTagName("sig");
        NodeList atoml;
        NodeList fieldl = xml.getDoc().getElementsByTagName("field");
        //System.out.println(fieldl.item(0));
        org.w3c.dom.Element aux;
        
        for(i=0; i<sigl.getLength(); i++) {
            System.out.println("NUM");
            aux = (org.w3c.dom.Element) sigl.item(i);
            sig = new Sig(aux);
            atoml = aux.getElementsByTagName("atom");
            
            sigList.add(sig);
            
            
            for(j=0; j<atoml.getLength(); j++) {
                aux = (org.w3c.dom.Element) atoml.item(j);
                //System.out.println(atoml.getLength());
                atomList.add(new Atom(aux, sig));
                System.out.println(aux.getAttribute("label"));
            }
        }
        
        for(i=0; i<fieldl.getLength(); i++) {
            System.out.println("NUM2");
            fieldList.add(new Field((org.w3c.dom.Element) fieldl.item(i), atomList));
        }
        
        System.out.println("");
        System.out.println("");
        for(i=0; i<fieldList.get(0).getTuples().size(); i++) {
            for(j=0; j<fieldList.get(0).getTuples().get(i).size(); j++) {
                System.out.println(fieldList.get(0).getTuples().get(i).get(j));
            }
            System.out.println("");
            
        }
        System.out.println("");
        System.out.println("");
        
    }
    
    public void addLog(String info) {
        logArea.setText(logArea.getText() + "\n" + info);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //System.setProperty("gs.ui.renderer", "org.graphstream.ui.renderer");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow(null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox layoutCheckBox;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextArea logArea;
    private javax.swing.JButton nextWorldButton;
    private javax.swing.JButton previousWorldButton;
    private javax.swing.JComboBox worldComboBox;
    private javax.swing.JButton zoomMinusButton;
    private javax.swing.JButton zoomPlusButton;
    // End of variables declaration//GEN-END:variables
    private File xmlFile;
    private Graph graph;
    private Viewer viewer;
    private View view;
    private String log;
    
    private ArrayList<Integer> integers;
    private ArrayList skolemList;    
    private ArrayList<Atom> atomList;
    private ArrayList<Sig> sigList;
    private ArrayList<Field> fieldList;
    protected boolean loop;
}

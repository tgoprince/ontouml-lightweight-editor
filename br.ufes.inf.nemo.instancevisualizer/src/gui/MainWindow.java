package gui;

import br.ufes.inf.nemo.common.ontoumlparser.OntoUMLParser;
import br.ufes.inf.nemo.common.resource.TypeName;
import obj.*;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.ParserConfigurationException;
import obj.XMLFile;
import org.graphstream.graph.Graph;
import org.graphstream.graph.implementations.*;
import org.graphstream.ui.swingViewer.View;
import org.graphstream.ui.swingViewer.Viewer;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.graphstream.ui.graphicGraph.*;
import org.graphstream.ui.swingViewer.ViewerListener;
import org.graphstream.ui.swingViewer.ViewerPipe;
import org.eclipse.emf.*;
import org.eclipse.emf.ecore.EObject;

/**
 *
 * @author Mauricio
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow(org.graphstream.graph.Graph graph) {
        super();

        worldCounter = -1;
        //viewer = new Viewer(graph, Viewer.ThreadingModel.GRAPH_IN_SWING_THREAD);
        log = "";
        /*
        viewer = graph.display();
        viewer.enableAutoLayout();
        viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.CLOSE_VIEWER);
*/
        //View view = viewer.addDefaultView(false);

        //view.setVisible(true);
        
        //setBounds(0, 0, 640, 480);

        initComponents();
        //scrollPane1.add(view);

        //worldComboBox.addItem("Show all worlds");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        previousWorldButton = new javax.swing.JButton();
        nextWorldButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        fitItemMenu = new javax.swing.JMenu();
        zoomPlusMenuItem = new javax.swing.JMenuItem();
        zoomMinusMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        layoutMenuItem = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        previousWorldButton.setText("<<");
        previousWorldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousWorldButtonActionPerformed(evt);
            }
        });

        nextWorldButton.setText(">>");
        nextWorldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextWorldButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Add welcome stuff here...\nIn the mean time, you can use this text field as a memo!\nIt's completely editable!");
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane1.addTab("Welcome", jScrollPane1);

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open XML...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        jMenuBar1.add(fileMenu);

        fitItemMenu.setText("View");

        zoomPlusMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, 0));
        zoomPlusMenuItem.setText("Zoom +");
        zoomPlusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomPlusMenuItemActionPerformed(evt);
            }
        });
        fitItemMenu.add(zoomPlusMenuItem);

        zoomMinusMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, 0));
        zoomMinusMenuItem.setText("Zoom -");
        zoomMinusMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomMinusMenuItemActionPerformed(evt);
            }
        });
        fitItemMenu.add(zoomMinusMenuItem);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, 0));
        jMenuItem1.setText("Fit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fitItemMenu.add(jMenuItem1);
        fitItemMenu.add(jSeparator1);

        layoutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        layoutMenuItem.setSelected(true);
        layoutMenuItem.setText("Enable/Disable Auto-Layout");
        layoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layoutMenuItemActionPerformed(evt);
            }
        });
        fitItemMenu.add(layoutMenuItem);

        jMenuBar1.add(fitItemMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(previousWorldButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextWorldButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousWorldButton)
                    .addComponent(nextWorldButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void previousWorldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousWorldButtonActionPerformed
        // TODO add your handling code here:
        /*
        System.out.println(worldComboBox.getSelectedIndex());
        if(worldComboBox.getSelectedIndex() == 0) {
            addLog("Reached world list limit");
        } else {
            //worldComboBox.setSelectedIndex(worldComboBox.getSelectedIndex() - 1);
        }
        * */
        if(jTabbedPane1.getSelectedIndex() != 0) {
            jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() - 1);
        }
    }//GEN-LAST:event_previousWorldButtonActionPerformed

    private void nextWorldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextWorldButtonActionPerformed
        // TODO add your handling code here:
        //if(worldComboBox.getSelectedIndex() + 1 == worldComboBox.getItemCount()) {
            //addLog("Reached world list limit");
        //} else {
            //worldComboBox.setSelectedIndex(worldComboBox.getSelectedIndex() + 1);
        if(jTabbedPane1.getSelectedIndex() == worldCounter+1) {
                System.out.println(xmlFile.getWorldList().get(worldCounter).getLabel());
                xGraph.setGraphToSelectedWorld(xmlFile.getWorldList().get(worldCounter));
                //xGraph.getView().add(jMenuBar1);
                jTabbedPane1.add(xGraph.showGraph());
                jTabbedPane1.setTitleAt(jTabbedPane1.getSelectedIndex() + 1, xmlFile.getWorldList().get(worldCounter).getLabel());
                worldCounter++;
        }
        jTabbedPane1.setSelectedIndex(jTabbedPane1.getSelectedIndex() + 1);
            
        //}
    }//GEN-LAST:event_nextWorldButtonActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("./"));
        fc.setFileFilter(new FileNameExtensionFilter("XML instances", "xml"));
        int returnVal = fc.showOpenDialog(MainWindow.this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                xmlFile = new XMLFile(fc.getSelectedFile());
                String fileNameWithoutExt = fc.getSelectedFile().getName().replaceFirst("[.][^.]+$", "");
                String refontoPath = fc.getSelectedFile().getParent() + "\\" + fileNameWithoutExt + ".refontouml";
                File refontoFile = new File(refontoPath);
                System.out.println(refontoFile.getAbsolutePath());
                OntoUMLParser onto = null;
                
                if(refontoFile.exists()) {
                	onto = new OntoUMLParser(refontoPath);
                    /*
                    EObject eo = onto.getElement("Passenger");
                    String estereotipo = TypeName.getTypeName(eo);
                    System.out.println(estereotipo);
                    */
                    xGraph = new XGraph(xmlFile, onto, 0);
                    xGraph.setGraphToAllWorlds();
                    xGraph.showGraph();

                    if(jTabbedPane1.getTabCount() > 1) {
                        java.awt.Component c = jTabbedPane1.getTabComponentAt(0);
                        System.out.println(jTabbedPane1.getComponentCount());
                        jTabbedPane1.removeAll();
                        jTabbedPane1.addTab("Welcome", c);
                        System.out.println(jTabbedPane1.getComponentCount());
                    }
                    jTabbedPane1.add(xGraph.getView());
                    jTabbedPane1.setSelectedIndex(1);
                    //jTabbedPane1.setTitleAt(1, fc.getSelectedFile().getName());
                    jTabbedPane1.setTitleAt(1, "All Worlds");
                    worldCounter = 0;
                }else{
                	System.out.println(".refontouml NOT FOUND... You need it on the same directory of the .xml.");
                }
            } catch (    ParserConfigurationException | SAXException | IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void zoomPlusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomPlusMenuItemActionPerformed
        // TODO add your handling code here:
        xGraph.getView().getCamera().setViewPercent(xGraph.getView().getCamera().getViewPercent() - 0.1);
    }//GEN-LAST:event_zoomPlusMenuItemActionPerformed

    private void zoomMinusMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomMinusMenuItemActionPerformed
        // TODO add your handling code here:
        xGraph.getView().getCamera().setViewPercent(xGraph.getView().getCamera().getViewPercent() + 0.1);
    }//GEN-LAST:event_zoomMinusMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        xGraph.getViewer().enableAutoLayout();
        xGraph.getView().getCamera().resetView();
        if(!layoutMenuItem.isSelected()) {
            xGraph.getViewer().disableAutoLayout();
        }
        
        //xGraph.getView().getCamera().setAutoFitView(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void layoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layoutMenuItemActionPerformed
        // TODO add your handling code here:
        if(layoutMenuItem.isSelected()) {
            xGraph.getViewer().enableAutoLayout();
        }else{
            xGraph.getViewer().disableAutoLayout();
        }
    }//GEN-LAST:event_layoutMenuItemActionPerformed

    /*
    public void addLog(String info) {
        logArea.setText(logArea.getText() + "\n" + info);
    }
    */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //System.setProperty("gs.ui.renderer", "org.graphstream.ui.renderer");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow(null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu fitItemMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JCheckBoxMenuItem layoutMenuItem;
    private javax.swing.JButton nextWorldButton;
    private javax.swing.JMenuItem openMenuItem;
    //private javax.swing.JMenuItem openRefMenuItem;
    private javax.swing.JButton previousWorldButton;
    private javax.swing.JMenuItem zoomMinusMenuItem;
    private javax.swing.JMenuItem zoomPlusMenuItem;
    // End of variables declaration//GEN-END:variables
    private XMLFile xmlFile;
    private XGraph xGraph;
    
    private int worldCounter;
    private String log;
    
}
